{"version":3,"sources":["pages/home/Home.module.scss","pages/about/About.module.scss","components/Layout/Layout.module.scss","pages/home/index.ts","pages/home/Home.tsx","pages/about/index.ts","pages/about/About.tsx","components/Layout/index.ts","components/Layout/Layout.tsx","pages/index.tsx","store/app.store.ts","store/reducers.ts","store/createStore.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Home","props","className","styles","root","About","Layout","children","pages","name","path","Component","Routes","routes","map","i","exact","key","render","routeProps","to","handleActions","createAction","state","payload","produce","draft","count","combineReducers","app","persistReducer","storage","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","err","enhancer","store","createStore","reducers","persistor","persistStore","App","loading","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,sB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,uB,qMCCVC,ECGQ,SAACC,GACtB,OACE,yBAAKC,UAAWC,IAAOC,MACrB,sC,iBCNSC,ECGS,SAACJ,GACvB,OACE,yBAAKC,UAAWC,IAAOC,MACrB,uC,iBCNSE,ECCU,SAACL,GACxB,OAAO,yBAAKC,UAAWC,IAAOC,MAAOH,EAAMM,WCEvCC,EAAQ,CACZ,CACEC,KAAM,OACNC,KLNsB,QKOtBC,UAAWX,GAEb,CACES,KAAM,QACNC,KHXsB,SGYtBC,UAAWN,IAMTO,EAAU,WACd,IAAMC,EAAM,sBACPL,EAAMM,KAAI,WAAkCC,GAAlC,IAAGC,EAAH,EAAGA,MAAON,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,UAAhB,OACX,gBAAC,IAAD,CACEM,IAAG,gBAAWF,GACdC,QAASA,EACTN,KAAMA,EACNQ,OAAQ,SAACC,GAAD,OAAqB,gBAACR,EAAcQ,UANtC,CASV,gBAAC,IAAD,CAAUF,IAAI,sBAAsBG,GL5Bd,YK8BxB,OAAO,kBACL,gBAAC,EAAD,KACE,gBAAC,IAAD,KAASP,KAdC,G,gECRDQ,GAFSC,YAFP,gBAE8B,kBAAM,QAEtCD,YAAc,eAJZ,gBAMD,SAACE,EAAD,KAAUC,QAAV,OACVC,YAAQF,GAAO,SAACG,GACdA,EAAMC,cAdO,CACnBA,MAAO,KCCMC,cAAgB,CAC7BC,IAAKC,YAAe,CAAEb,IAAK,MAAOc,aAAWF,K,ECFhC,SAACG,GACd,IAAIC,EACJ,IAEEA,EAAmBC,OAAOC,sCAAwCC,IAClE,MAAOC,GACPJ,EAAmBG,IAErB,IAAME,EAAWL,IAEXM,EAAaC,YAAYC,EAAUT,EAAcM,GAIvD,MAAO,CAAEC,QAAOG,UAFEC,YAAaJ,ICTJC,GAArBD,E,EAAAA,MAAOG,E,EAAAA,UAcAE,EAZO,WACpB,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,CAAaG,UAAWA,EAAWG,QAAS,MAC1C,kBAAC,IAAD,KACE,kBAACjC,EAAD,UCFUkC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAAShC,OAAO,kBAAC,EAAD,MAASiC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8bc4ae7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__3GMAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"About_root__3rHTE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Layout_root__KuT-s\"};","import Home, { uriPattern } from './Home';\n\nexport default Home;\nexport { uriPattern };\n","import React from 'react';\nimport styles from './Home.module.scss';\n\nexport const uriPattern = '/home';\n\nconst Home: React.FC = (props: any) => {\n  return (\n    <div className={styles.root}>\n      <h1>Home</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","import About, { uriPattern } from './About';\n\nexport default About;\nexport { uriPattern };\n","import React from 'react';\nimport styles from './About.module.scss';\n\nexport const uriPattern = '/about';\n\nconst About: React.FC = (props: any) => {\n  return (\n    <div className={styles.root}>\n      <h1>About</h1>\n    </div>\n  );\n};\n\nexport default About;\n","import Layout from './Layout';\n\nexport default Layout;\n","import React from 'react';\nimport styles from './Layout.module.scss';\n\nconst Layout: React.FC = (props: any) => {\n  return <div className={styles.root}>{props.children}</div>;\n};\n\nexport default Layout;\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Home, { uriPattern as home_path } from './home';\nimport About, { uriPattern as about_path } from './about';\nimport Layout from '../components/Layout';\n\nconst pages = [\n  {\n    name: 'Home',\n    path: home_path,\n    Component: Home,\n  },\n  {\n    name: 'About',\n    path: about_path,\n    Component: About,\n  },\n];\n\nconst REDIRECT_URI = home_path;\n\nconst Routes = (() => {\n  const routes = [\n    ...pages.map(({ exact, path, Component }: any, i) => (\n      <Route\n        key={`route-${i}`}\n        exact={!!exact}\n        path={path}\n        render={(routeProps: any) => <Component {...routeProps} />}\n      />\n    )),\n    <Redirect key=\"redirect-to-default\" to={REDIRECT_URI} />,\n  ];\n  return () => (\n    <Layout>\n      <Switch>{routes}</Switch>\n    </Layout>\n  );\n})();\n\nexport default pages;\n\nexport { Routes };\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\n\nconst initialState = {\n  count: 0,\n} as {\n  count: number;\n};\n\nconst INCREASE = 'app/INCREASE';\n\nexport const increase = createAction(INCREASE, () => null);\n\nexport default handleActions(\n  {\n    [INCREASE]: (state, { payload }) =>\n      produce(state, (draft) => {\n        draft.count++;\n      }),\n  },\n  initialState,\n);\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport app from './app.store';\n\nexport default combineReducers({\n  app: persistReducer({ key: 'app', storage }, app),\n});\n","import { createStore, compose } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport reducers from './reducers';\n\nexport default (initialState?: any) => {\n  let composeEnhancers: any;\n  try {\n    // @ts-ignore\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  } catch (err) {\n    composeEnhancers = compose;\n  }\n  const enhancer = composeEnhancers();\n\n  const store: any = createStore(reducers, initialState, enhancer);\n\n  const persistor = persistStore(store);\n\n  return { store, persistor };\n};\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Routes } from './pages';\nimport createStore from './store/createStore';\n\nconst { store, persistor } = createStore();\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <Router>\n          <Routes />\n        </Router>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}